int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
{
  int v3; // eax@1
  int shellcode_size; // ebp@1
  size_t v5; // rbx@1
  char *shellcode; // rdx@1
  __int64 v7; // rax@2
  int v8; // edi@5
  void *v9; // rbp@6
  char *v10; // ST18_8@6
  ucontext_t *v11; // ST00_8@6
  unsigned __int64 v12; // rbx@6
  mcontext_t *context_addr; // rbp@6
  const ucontext_t *context; // [sp+0h] [bp-148h]@6
  char *mmap_buf; // [sp+8h] [bp-140h]@1
  int fd; // [sp+14h] [bp-134h]@1
  char v17[256]; // [sp+27h] [bp-121h]@1
  unsigned __int8 v18; // [sp+127h] [bp-21h]@3
  __int64 v19; // [sp+128h] [bp-20h]@1

  v19 = *MK_FP(__FS__, 40LL);
  setbuf(stdout, 0LL);
  fd = open("/dev/urandom", 0);
  memset(v17, 0, 0x101uLL);
  v3 = -getpagesize();
  shellcode_size = v3 & 0x4096;
  v5 = v3 & 0x4096;
  mmap_buf = (char *)mmap(0LL, v5, 3, 34, -1, 0LL);
  puts("Shellcode?");
  fgets(mmap_buf, shellcode_size, stdin);
  shellcode = mmap_buf;
  while ( 1 )
  {
    v7 = (unsigned __int8)*shellcode;
    if ( (_BYTE)v7 == 10 )
      break;
    v18 += v17[v7] == 0;
    ++shellcode;
    v17[v7] |= 1u;
  }
  if ( v18 <= 7u )
  {
    mprotect(mmap_buf, v5, 5);
    v9 = mmap(0LL, v5, 7, 34, -1, 0LL);
    read(fd, v9, v5 - 936);
    v10 = (char *)v9 + v5;
    v11 = (ucontext_t *)((char *)v9 + v5 - 936);
    getcontext(v11);
    v12 = -15LL;
    *((_QWORD *)v10 - 115) = v11;
    *((_QWORD *)v10 - 116) = 0LL;
    makecontext(v11, (void (*)(void))mmap_buf, 0, v11);
    context_addr = &context->uc_mcontext;
    do
    {
      if ( v12 > 1 )
        read(fd, context_addr, 8uLL);
      ++v12;
      context_addr = (mcontext_t *)((char *)context_addr + 8);
    }
    while ( v12 != 8 );
    close(fd);
    setcontext(context);
    v8 = 0;
  }
  else
  {
    puts("Shellcode too diverse.");
    v8 = 1;
  }
  _exit(v8);
}
