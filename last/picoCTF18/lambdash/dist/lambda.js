/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lambda = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,19],$V2=[1,17],$V3=[1,18],$V4=[1,5],$V5=[1,4],$V6=[1,6],$V7=[1,7],$V8=[1,8],$V9=[1,9],$Va=[1,10],$Vb=[1,13],$Vc=[1,22],$Vd=[1,23],$Ve=[1,25],$Vf=[1,26],$Vg=[5,7,12,15,17,18,22,24,25,27,28,29,30,33,35,36,37,38,40,41,43,44],$Vh=[5,7,12,15,17,18,22,24,25,27,28,29,30,33,35,36,37,38,40,41,44],$Vi=[1,48],$Vj=[1,51],$Vk=[1,44],$Vl=[1,45],$Vm=[1,47],$Vn=[1,49],$Vo=[1,50],$Vp=[15,18],$Vq=[1,66],$Vr=[5,7,12,15,17,18,20,22,24,25,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,51],$Vs=[28,51],$Vt=[18,29],$Vu=[5,7,12,15,17,18,22,24,25,27,30,33,35,36,37,38,40,41,43,44],$Vv=[5,7,12,15,17,18,22,24,25,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,51],$Vw=[18,22];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"untyped_ident":6,"IDENT":7,"ident":8,":":9,"type":10,"label":11,"LABEL":12,"tuple_element":13,"tuple_contents":14,",":15,"tuple":16,"{":17,"}":18,"case_entry":19,"->":20,"case_entry_list":21,"|":22,"case":23,"CASE":24,"(":25,"mexp":26,")":27,"+":28,"*":29,"ALIAS":30,"=":31,"IN":32,"[":33,"]":34,"FOLD":35,"AS":36,"UNFOLD":37,"LAMBDA":38,"DOT":39,"TYPE_LAMBDA":40,"FIX":41,"RETURNS":42,"#":43,"NUMERAL":44,"label_type_single":45,"sum_type":46,"product_type":47,"INT":48,"UNIT":49,"<":50,">":51,"REC":52,"FORALL":53,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENT",9:":",12:"LABEL",15:",",17:"{",18:"}",20:"->",22:"|",24:"CASE",25:"(",27:")",28:"+",29:"*",30:"ALIAS",31:"=",32:"IN",33:"[",34:"]",35:"FOLD",36:"AS",37:"UNFOLD",38:"LAMBDA",39:"DOT",40:"TYPE_LAMBDA",41:"FIX",42:"RETURNS",43:"#",44:"NUMERAL",48:"INT",49:"UNIT",50:"<",51:">",52:"REC",53:"FORALL"},
productions_: [0,[3,2],[6,1],[8,3],[8,1],[11,1],[13,2],[14,1],[14,3],[16,3],[19,4],[21,3],[21,3],[23,7],[4,3],[4,3],[4,1],[26,6],[26,2],[26,3],[26,4],[26,4],[26,2],[26,4],[26,4],[26,7],[26,1],[26,1],[26,3],[26,1],[26,2],[26,1],[26,4],[45,2],[46,1],[46,3],[47,1],[47,3],[10,1],[10,1],[10,1],[10,3],[10,3],[10,3],[10,4],[10,4],[10,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
require("util").inspect.defaultOptions.depth=1000; console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
this.$ = yytext;
break;
case 3:
this.$ = { kind: "TYPED_IDENT", type: $$[$0], value: $$[$0-2] };
break;
case 4:
this.$ = { kind: "UNTYPED_IDENT", value: $$[$0]};
break;
case 5:
this.$ = (yytext).slice(1);
break;
case 6:
 this.$={ label: $$[$0-1], value: $$[$0] };
break;
case 7:
this.$ = [$$[$0]];
break;
case 8: case 12: case 35: case 37:
this.$ = [...($$[$0-2]), $$[$0]] 
break;
case 9:
this.$=$$[$0-1];
break;
case 10:
this.$ = { label: $$[$0-3], binding: $$[$0-2], value: $$[$0] };
break;
case 11:
this.$ = [$$[$0-2], $$[$0] ];
break;
case 13:
this.$ = { kind:"CASE", binding: $$[$0-4], value: $$[$0-1]};
break;
case 14:
this.$ = { kind: "PLUS", value: [$$[$0-2], $$[$0]] };
break;
case 15:
this.$ = { kind: "TIMES", value: [$$[$0-2], $$[$0]] };
break;
case 16: case 31:
this.$ = $$[$0];
break;
case 17:
this.$ = { kind: "ALIAS", value: $$[$0], ident: $$[$0-4], type: $$[$0-2]};
break;
case 18:
this.$ = { kind: "CALL", value: $$[$0-1], subst: $$[$0] };
break;
case 19:
this.$ = $$[$0-1];
break;
case 20:
this.$ = { kind: "TYPE_CALL", value: $$[$0-3], subst: $$[$0-1]};
break;
case 21:
this.$ = { kind: "FOLD", value: $$[$0], type: $$[$0-1]};
break;
case 22:
this.$ = { kind: "UNFOLD", value: $$[$0]};
break;
case 23:
this.$ = { kind: "LAMBDA", value: $$[$0], binding: $$[$0-2] };
break;
case 24:
this.$ = { kind: "TYPE_LAMBDA", value: $$[$0], binding: $$[$0-2]};
break;
case 25:
this.$ = { kind: "FIXED", fn: $$[$0-5], value: $$[$0], returnType: $$[$0-2], binding: $$[$0-4]};
break;
case 26:
this.$ = $$[$0]
break;
case 27:
this.$ = { kind: "TUPLE", value: $$[$0] };
break;
case 28:
this.$ = { kind: "EXTRACT", value: $$[$0-2], productLabel: $$[$0] };
break;
case 29:
this.$ = { kind: "NUMBER", value: Number(yytext) };
break;
case 30: case 39:
this.$ = { kind: "UNIT" };
break;
case 32:
this.$ = { kind: "SUM", sumLabel: $$[$0-3], value: $$[$0-2], type: $$[$0] };
break;
case 33:
this.$ = { label: $$[$0-1], value: $$[$0] };
break;
case 34: case 36:
this.$ = [$$[$0]]
break;
case 38:
this.$ = { kind: "INT" };
break;
case 40:
this.$ = { kind: "TYPE_VAR", value: $$[$0]};
break;
case 41:
this.$ = { kind: "SUM", value: $$[$0-1] };
break;
case 42:
this.$ = { kind: "PRODUCT", value: $$[$0-1] };
break;
case 43:
this.$ = { kind: "ARROW", value: [$$[$0-2], $$[$0]] };
break;
case 44:
this.$ = { kind: "REC", value: $$[$0], binding: $$[$0-2]};
break;
case 45:
this.$ = { kind: "NEEDS_CONSTRAINT", binding: $$[$0-2], type: $$[$0]};
break;
case 46:
this.$ = $$[$0-1]
break;
}
},
table: [{3:1,4:2,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{1:[3]},{5:[1,21],28:$Vc,29:$Vd},o([5,15,18,22,27,28,29,36],[2,16],{8:11,16:12,23:14,11:15,6:16,26:24,7:$V0,12:$V1,17:$V2,24:$V3,25:$V4,30:$V5,33:$Ve,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,43:$Vf,44:$Vb}),{6:27,7:$V0},{4:28,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,27:[1,29],30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{36:[1,30]},{6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:31,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{6:16,7:$V0,8:32},{6:33,7:$V0},{6:34,7:$V0},o($Vg,[2,26]),o($Vg,[2,27]),o($Vg,[2,29]),o($Vg,[2,31]),{4:35,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},o([5,7,12,15,17,18,20,22,24,25,27,28,29,30,33,35,36,37,38,39,40,41,42,43,44],[2,4],{9:[1,36]}),{11:39,12:$V1,13:38,14:37},{25:[1,40]},o([5,7,12,15,17,18,22,24,25,27,28,29,30,33,35,36,37,38,40,41,43,44,48,49,50,52,53],[2,5]),o([5,7,9,12,15,17,18,20,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,51],[2,2]),{1:[2,1]},{4:41,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{4:42,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},o($Vh,[2,18],{8:11,16:12,23:14,11:15,6:16,26:24,43:$Vf}),{6:46,7:$V0,10:43,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},{11:52,12:$V1},{31:[1,53]},{27:[1,54],28:$Vc,29:$Vd},o($Vg,[2,30]),{6:46,7:$V0,10:55,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},o($Vh,[2,22],{8:11,16:12,23:14,11:15,6:16,26:24,43:$Vf}),{39:[1,56]},{39:[1,57]},{6:16,7:$V0,8:58},{28:$Vc,29:$Vd,36:[1,59]},{6:46,7:$V0,10:60,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},{15:[1,62],18:[1,61]},o($Vp,[2,7]),{4:63,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:64,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},o([5,7,12,15,17,18,22,24,25,27,28,30,33,35,36,37,38,40,41,43,44],[2,14],{29:$Vd}),o($Vg,[2,15]),{20:$Vq,34:[1,65]},o($Vr,[2,38]),o($Vr,[2,39]),o($Vr,[2,40]),{11:69,12:$V1,45:68,46:67},{11:69,12:$V1,45:71,47:70},{6:72,7:$V0},{6:73,7:$V0},{6:46,7:$V0,10:74,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},o($Vg,[2,28]),{6:46,7:$V0,10:75,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},o($Vg,[2,19]),{6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,20:$Vq,23:14,24:$V3,25:$V4,26:76,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{4:77,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{4:78,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{42:[1,79]},{6:46,7:$V0,10:80,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},o([5,7,12,15,17,18,22,24,25,27,28,29,30,33,35,36,37,38,39,40,41,42,43,44],[2,3],{20:$Vq}),o($Vg,[2,9]),{11:39,12:$V1,13:81},o($Vp,[2,6],{28:$Vc,29:$Vd}),{6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:24,27:[1,82],30:$V5,33:$Ve,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,43:$Vf,44:$Vb},o($Vg,[2,20]),{6:46,7:$V0,10:83,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},{28:[1,85],51:[1,84]},o($Vs,[2,34]),{6:46,7:$V0,10:86,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},{18:[1,87],29:[1,88]},o($Vt,[2,36]),{39:[1,89]},{39:[1,90]},{20:$Vq,27:[1,91]},{20:$Vq,32:[1,92]},o($Vh,[2,21],{8:11,16:12,23:14,11:15,6:16,26:24,43:$Vf}),o($Vu,[2,23],{28:$Vc,29:$Vd}),o($Vu,[2,24],{28:$Vc,29:$Vd}),{6:46,7:$V0,10:93,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},o($Vg,[2,32],{20:$Vq}),o($Vp,[2,8]),{17:[1,94]},o($Vv,[2,43],{20:$Vq}),o($Vr,[2,41]),{11:69,12:$V1,45:95},o([18,28,29,51],[2,33],{20:$Vq}),o($Vr,[2,42]),{11:69,12:$V1,45:96},{6:46,7:$V0,10:97,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},{6:46,7:$V0,10:98,17:$Vi,25:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,53:$Vo},o($Vr,[2,46]),{4:99,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{20:$Vq,39:[1,100]},{11:103,12:$V1,19:102,21:101},o($Vs,[2,35]),o($Vt,[2,37]),o($Vv,[2,44],{20:$Vq}),o($Vv,[2,45],{20:$Vq}),o($Vu,[2,17],{28:$Vc,29:$Vd}),{4:104,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},{18:[1,105],22:[1,106]},{22:[1,107]},{6:16,7:$V0,8:108},o($Vu,[2,25],{28:$Vc,29:$Vd}),o($Vg,[2,13]),{11:103,12:$V1,19:109},{11:103,12:$V1,19:110},{20:[1,111]},o($Vw,[2,12]),o($Vw,[2,11]),{4:112,6:16,7:$V0,8:11,11:15,12:$V1,16:12,17:$V2,23:14,24:$V3,25:$V4,26:3,30:$V5,35:$V6,37:$V7,38:$V8,40:$V9,41:$Va,44:$Vb},o($Vw,[2,10],{28:$Vc,29:$Vd})],
defaultActions: {21:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "LAMBDA";
break;
case 2:return "FIX";
break;
case 3:return "TYPE_LAMBDA";
break;
case 4:return "AS";
break;
case 5:return "RETURNS";
break;
case 6:return "ALIAS";
break;
case 7:return "FORALL";
break;
case 8:return "=";
break;
case 9:return "IN";
break;
case 10:return "(";
break;
case 11:return ")";
break;
case 12:return "[";
break;
case 13:return "]";
break;
case 14:return "<";
break;
case 15:return ">";
break;
case 16:return "{";
break;
case 17:return "}";
break;
case 18:return ",";
break;
case 19:return "+";
break;
case 20:return "*";
break;
case 21:return ":";
break;
case 22:return "->";
break;
case 23:return "INT";
break;
case 24:return "FOLD";
break;
case 25:return "UNFOLD";
break;
case 26:return "REC";
break;
case 27:return "CASE";
break;
case 28:return "|";
break;
case 29:return "#";
break;
case 30:return "UNIT";
break;
case 31:return "NUMERAL";
break;
case 32:return "LABEL";
break;
case 33:return "IDENT";
break;
case 34:return "DOT";
break;
case 35:return "EOF";
break;
}
},
rules: [/^(?:\s+)/,/^(?:lambda\b)/,/^(?:fix\b)/,/^(?:LAMBDA\b)/,/^(?:as\b)/,/^(?:returns\b)/,/^(?:alias\b)/,/^(?:forall\b)/,/^(?:=)/,/^(?:in\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\+)/,/^(?:\*)/,/^(?::)/,/^(?:->)/,/^(?:int\b)/,/^(?:fold\b)/,/^(?:unfold\b)/,/^(?:rec\b)/,/^(?:case\b)/,/^(?:\|)/,/^(?:#)/,/^(?:unit\b)/,/^(?:[0-9]+\b)/,/^(?:`[a-zA-Z0-9_]+\b)/,/^(?:[a-zA-Z_]+\b)/,/^(?:\.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lambda;
exports.Parser = lambda.Parser;
exports.parse = function () { return lambda.parse.apply(lambda, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}